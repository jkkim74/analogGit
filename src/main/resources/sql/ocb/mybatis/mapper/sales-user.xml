<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.skplanet.bisportal.repository.SalesUserRepository">
    <insert id="createSalesUser" parameterType="SalesUser" >
        <selectKey keyProperty="id" order="BEFORE" resultType="Long">
            SELECT BIPUSER.user_seq.nextval FROM DUAL
        </selectKey>
        INSERT INTO sales_user (id, username, fullname, birth_type, birth_date, sex, email, mobile, signup_date, last_update)
        VALUES (#{id}, #{username}, #{fullName}, #{birthType}, #{birthDate}, #{sex}, #{email}, #{mobile}, #{signupDate}, #{lastUpdate})
    </insert>

    <select id="getSalesUserById" parameterType="Long" resultType="SalesUser">
        SELECT id, username, fullname, birth_type, birth_date, sex, email, mobile, signup_date, last_update
        FROM   sales_user
        WHERE  id = #{id}
    </select>

    <delete id="deleteSalesUserById" parameterType="Long">
        DELETE FROM sales_user WHERE id = #{id}
    </delete>

    <select id="getSalesUsers" parameterType="Map" resultType="SalesUser">
        SELECT b.*
        FROM (
            SELECT a.*, rownum rnum
            FROM (
                SELECT COUNT(*) OVER() totalRecordCount,
                    id, username, fullname, birth_type, birth_date, decode(sex, 'M', '남자', 'F', '여자') as sex, email, mobile, signup_date,last_update
                FROM   sales_user
                WHERE  signup_date &gt;= #{startDate}
                AND    signup_date &lt;= #{endDate}
                ORDER BY id DESC
            ) a
            WHERE rownum &lt;= #{lastIndex}
        ) b WHERE rnum &gt; #{firstIndex}
    </select>

    <select id="getSalesUserSexCount" parameterType="String" resultType="Aggregation">
        SELECT decode(sex, 'M', '남자', 'F', '여자') as key, count(sex) as value
        FROM   SALES_USER
        WHERE signup_date like #{signupDate}
        GROUP BY decode(sex, 'M', '남자', 'F', '여자')
    </select>

    <select id="getSumCountByType" resultType="Aggregation">
        SELECT SUBSTR (signup_date, 0, 4) || '-' || SUBSTR (signup_date, 5, 2) AS key,
                 COUNT (*) AS VALUE
            FROM sales_user
        GROUP BY SUBSTR (signup_date, 0, 4) || '-' || SUBSTR (signup_date, 5, 2)
        ORDER BY SUBSTR (signup_date, 0, 4) || '-' || SUBSTR (signup_date, 5, 2)
    </select>

    <select id="getSumCountPerMonthByPagination" parameterType="Map" resultType="Aggregation">
        SELECT rnum,key,VALUE,totalRecourdCount
            FROM (SELECT ROWNUM rnum,key,VALUE,totalRecourdCount
                FROM (  SELECT COUNT (*) OVER () totalRecourdCount,
                SUBSTR (signup_date, 0, 4)|| '-'|| SUBSTR (signup_date, 5, 2) AS key,
                COUNT (*) AS VALUE
                FROM sales_user
                GROUP BY    SUBSTR (signup_date, 0, 4)|| '-'|| SUBSTR (signup_date, 5, 2)
                ORDER BY    SUBSTR (signup_date, 0, 4)|| '-'|| SUBSTR (signup_date, 5, 2))
            WHERE rownum &lt;= #{lastIndex})
        WHERE rnum &gt; #{firstIndex}
    </select>
    <select id="getSignupdateSexAgeBySignupDate" parameterType="JqGridRequest" resultType="Signup">
        SELECT signup_date AS signupDate, sex, decode(age, 0, '0~9', 1, '10~19', 2, '20~29', 3, '30~39', 4, '40~49', 5, '50~59', '60~') AS ageGroup, count(id) AS signupCnt
        FROM
        (
            SELECT id, substr(signup_date, 0, 4) || '-' || substr(signup_date, 5, 2)|| '-' || substr(signup_date, 7, 2) as signup_date,
              decode(sex, 'M', '남자', '여자') sex,
              LEAST(FLOOR(FLOOR(MONTHS_BETWEEN(sysdate, TO_DATE(birth_date,'yyyy-mm-dd'))/12) / 10), 6) age
            FROM   sales_user
            WHERE  signup_date &gt; #{startDate}
            AND    signup_date &lt;= #{endDate}
        )
        GROUP BY
          signup_date, sex, decode(age, 0, '0~9', 1, '10~19', 2, '20~29', 3, '30~39', 4, '40~49', 5, '50~59', '60~')
        ORDER BY
        <if test="sidx == 'signupDate'">
            signupDate ${sord}
        </if>
        <if test="sidx == 'sex'">
            sex ${sord}
        </if>
        <if test="sidx == 'ageGroup'">
            ageGroup ${sord}
        </if>
        <if test="sidx == 'signupDateAgeGroup'">
            signupDate ${sord}, sex ${sord}, ageGroup ${sord}
        </if>
    </select>

</mapper>
